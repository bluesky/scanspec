{"openapi": "3.0.2", "info": {"title": "FastAPI", "version": "0.1.0"}, "paths": {"/valid": {"post": {"summary": "Valid", "description": "Validate wether a ScanSpec can produce a viable scan.\n\nArgs:\n    spec: The scanspec to validate\n\nReturns:\n    ValidResponse: A canonical version of the spec if it is valid.\n        An error otherwise.", "operationId": "valid_valid_post", "requestBody": {"content": {"application/json": {"schema": {"title": "Spec"}, "example": {"outer": {"axis": "y", "start": 0.0, "stop": 10.0, "num": 3, "type": "Line"}, "inner": {"axis": "x", "start": 0.0, "stop": 10.0, "num": 4, "type": "Line"}, "type": "Product"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ValidResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/midpoints": {"post": {"summary": "Midpoints", "description": "Generate midpoints from a scanspec.\n\nA scanspec can produce bounded points (i.e. a point is valid if an\naxis is between a minimum and and a maximum, see /bounds). The midpoints\nare the middle of each set of bounds.\n\nArgs:\n    request: Scanspec and formatting info.\n\nReturns:\n    MidpointsResponse: Midpoints of the scan", "operationId": "midpoints_midpoints_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PointsRequest"}, "example": {"spec": {"outer": {"axis": "y", "start": 0.0, "stop": 10.0, "num": 3, "type": "Line"}, "inner": {"axis": "x", "start": 0.0, "stop": 10.0, "num": 4, "type": "Line"}, "type": "Product"}, "max_frames": 1024, "format": "FLOAT_LIST"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MidpointsResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/bounds": {"post": {"summary": "Bounds", "description": "Generate bounds from a scanspec.\n\nA scanspec can produce points with lower and upper bounds.\n\nArgs:\n    request: Scanspec and formatting info.\n\nReturns:\n    BoundsResponse: Bounds of the scan", "operationId": "bounds_bounds_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PointsRequest"}, "example": {"spec": {"outer": {"axis": "y", "start": 0.0, "stop": 10.0, "num": 3, "type": "Line"}, "inner": {"axis": "x", "start": 0.0, "stop": 10.0, "num": 4, "type": "Line"}, "type": "Product"}, "max_frames": 1024, "format": "FLOAT_LIST"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BoundsResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/gap": {"post": {"summary": "Gap", "description": "Generate gaps from a scanspec.\n\nA scanspec may indicate if there is a gap between two frames.\nThe array returned corresponds to whether or not there is a gap\nafter each frame.\n\nArgs:\n    request: Scanspec and formatting info.\n\nReturns:\n    GapResponse: Bounds of the scan", "operationId": "gap_gap_post", "requestBody": {"content": {"application/json": {"schema": {"title": "Spec"}, "example": {"outer": {"axis": "y", "start": 0.0, "stop": 10.0, "num": 3, "type": "Line"}, "inner": {"axis": "x", "start": 0.0, "stop": 10.0, "num": 4, "type": "Line"}, "type": "Product"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GapResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/smalleststep": {"post": {"summary": "Smallest Step", "description": "Calculate the smallest step in a scan, both absolutely and per-axis.\n\nIgnore any steps of size 0.\n\nArgs:\n    spec: The spec of the scan\n\nReturns:\n    SmallestStepResponse: A description of the smallest steps in the spec", "operationId": "smallest_step_smalleststep_post", "requestBody": {"content": {"application/json": {"schema": {"title": "Spec"}, "example": {"outer": {"axis": "y", "start": 0.0, "stop": 10.0, "num": 3, "type": "Line"}, "inner": {"axis": "x", "start": 0.0, "stop": 10.0, "num": 4, "type": "Line"}, "type": "Product"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SmallestStepResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}}, "components": {"schemas": {"BoundsResponse": {"title": "BoundsResponse", "required": ["total_frames", "returned_frames", "format", "lower", "upper"], "type": "object", "properties": {"total_frames": {"title": "Total Frames", "type": "integer", "description": "Total number of frames in spec"}, "returned_frames": {"title": "Returned Frames", "type": "integer", "description": "Total of number of frames in this response, may be less than total_frames due to downsampling etc."}, "format": {"allOf": [{"$ref": "#/components/schemas/PointsFormat"}], "description": "Format of returned point data"}, "lower": {"title": "Lower", "type": "object", "additionalProperties": {"anyOf": [{"type": "string"}, {"type": "array", "items": {"type": "number"}}]}, "description": "Lower bounds of scan frames if different from midpoints"}, "upper": {"title": "Upper", "type": "object", "additionalProperties": {"anyOf": [{"type": "string"}, {"type": "array", "items": {"type": "number"}}]}, "description": "Upper bounds of scan frames if different from midpoints"}}, "description": "Bounds of a generated scan."}, "GapResponse": {"title": "GapResponse", "required": ["gap"], "type": "object", "properties": {"gap": {"title": "Gap", "type": "array", "items": {"type": "boolean"}, "description": "Boolean array indicating if there is a gap between each frame"}}, "description": "Presence of gaps in a generated scan."}, "HTTPValidationError": {"title": "HTTPValidationError", "type": "object", "properties": {"detail": {"title": "Detail", "type": "array", "items": {"$ref": "#/components/schemas/ValidationError"}}}}, "MidpointsResponse": {"title": "MidpointsResponse", "required": ["total_frames", "returned_frames", "format", "midpoints"], "type": "object", "properties": {"total_frames": {"title": "Total Frames", "type": "integer", "description": "Total number of frames in spec"}, "returned_frames": {"title": "Returned Frames", "type": "integer", "description": "Total of number of frames in this response, may be less than total_frames due to downsampling etc."}, "format": {"allOf": [{"$ref": "#/components/schemas/PointsFormat"}], "description": "Format of returned point data"}, "midpoints": {"title": "Midpoints", "type": "object", "additionalProperties": {"anyOf": [{"type": "string"}, {"type": "array", "items": {"type": "number"}}]}, "description": "The midpoints of scan frames for each axis"}}, "description": "Midpoints of a generated scan."}, "PointsFormat": {"title": "PointsFormat", "enum": ["STRING", "FLOAT_LIST", "BASE64_ENCODED"], "type": "string", "description": "Formats in which we can return points."}, "PointsRequest": {"title": "PointsRequest", "required": ["spec"], "type": "object", "properties": {"spec": {"title": "Spec", "description": "The spec from which to generate points"}, "max_frames": {"title": "Max Frames", "type": "integer", "description": "The maximum number of points to return, if None will return as many as calculated", "default": 100000}, "format": {"allOf": [{"$ref": "#/components/schemas/PointsFormat"}], "description": "The format in which to output the points data", "default": "FLOAT_LIST"}}, "description": "A request for generated scan points."}, "SmallestStepResponse": {"title": "SmallestStepResponse", "required": ["absolute", "per_axis"], "type": "object", "properties": {"absolute": {"title": "Absolute", "type": "number", "description": "Absolute smallest distance between two points on a single axis"}, "per_axis": {"title": "Per Axis", "type": "object", "additionalProperties": {"type": "number"}, "description": "Smallest distance between two points on each axis"}}, "description": "Information about the smallest steps between points in a spec."}, "ValidResponse": {"title": "ValidResponse", "required": ["input_spec", "valid_spec"], "type": "object", "properties": {"input_spec": {"title": "Input Spec", "description": "The input scanspec"}, "valid_spec": {"title": "Valid Spec", "description": "The validated version of the spec"}}, "description": "Response model for spec validation."}, "ValidationError": {"title": "ValidationError", "required": ["loc", "msg", "type"], "type": "object", "properties": {"loc": {"title": "Location", "type": "array", "items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}}, "msg": {"title": "Message", "type": "string"}, "type": {"title": "Error Type", "type": "string"}}}}}}
