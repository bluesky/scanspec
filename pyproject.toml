[build-system]
requires = ["setuptools>=64", "setuptools_scm[toml]>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "scanspec"
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
description = "Specify step and flyscan paths in a serializable, efficient and Pythonic way"
dependencies = ["numpy", "click>=8.1", "pydantic>=2.0"]
dynamic = ["version"]
license.file = "LICENSE"
readme = "README.md"
requires-python = ">=3.11"

[project.optional-dependencies]
# Plotting
plotting = ["scipy", "matplotlib"]
# REST service support
service = ["fastapi>=0.100.0", "uvicorn"]
# For development tests/docs
[dependency-groups]
dev = [
    # This syntax is supported since pip 21.2
    # https://github.com/pypa/pip/issues/10393
    "scanspec[plotting]",
    "scanspec[service]",
    "autodoc-pydantic",
    "copier",
    "httpx",
    "myst-parser",
    "pre-commit",
    "pydata-sphinx-theme>=0.12",
    "pyright",
    "pytest",
    "pytest-cov",
    "ruff",
    "sphinx-autobuild",
    "sphinx-copybutton",
    "sphinx-design",
    "sphinxcontrib-openapi",
    "tox-uv",
    "types-mock",
    "Pillow==11.0.0",
]

[project.scripts]
scanspec = "scanspec.cli:cli"

[project.urls]
GitHub = "https://github.com/bluesky/scanspec"

[[project.authors]] # Further authors may be added by duplicating this section
email = "tom.cobb@diamond.ac.uk"
name = "Tom Cobb"

[tool.setuptools_scm]
version_file = "src/scanspec/_version.py"

[tool.pyright]
typeCheckingMode = "strict"
reportMissingImports = false # Ignore missing stubs in imported modules

[tool.pytest.ini_options]
# Run pytest with all our checkers, and don't spam us with massive tracebacks on error
addopts = """
    --tb=native -vv --doctest-modules --doctest-glob="*.rst"
    """
# https://iscinumpy.gitlab.io/post/bound-version-constraints/#watch-for-warnings
filterwarnings = "error"
# Doctest python code in docs, python code in src docstrings, test functions in tests
testpaths = "docs src tests"

[tool.coverage.run]
patch = ["subprocess"]
data_file = "/tmp/scanspec.coverage"

[tool.coverage.paths]
# Tests are run from installed location, map back to the src directory
source = ["src", "**/site-packages/"]

[tool.tox]
skipsdist = true
# envs to runs automatically with tox -p
env_list = ["pre-commit", "type-checking", "tests", "docs"]

[tool.tox.env_run_base]
# Pass all environment variables to the test environments
passenv = ["*"]

[tool.tox.env.pre-commit]
description = "Run pre-commit on all files"
commands = [
    [
        "pre-commit",
        "run",
        "--all-files",
        "--show-diff-on-failure",
        { replace = "posargs", default = [
        ], extend = true },
    ],
]

[tool.tox.env.type-checking]
description = "Run pyright"
commands = [
    [
        "pyright",
        "--pythonpath",
        ".venv/bin/python",
        "src",
        "tests",
        { replace = "posargs", default = [
        ], extend = true },
    ],
]

[tool.tox.env.tests]
description = "Run tests with coverage"
commands = [
    [
        "pytest",
        "--cov=scanspec",
        "--cov-report",
        "term",
        "--cov-report",
        "xml:cov.xml",
        { replace = "posargs", default = [
        ], extend = true },
    ],
]

[tool.tox.env.docs]
description = "Run docs build with clean environment"
commands = [
    [
        "sphinx-build",
        "--fresh-env",
        "--show-traceback",
        "--fail-on-warning",
        "--keep-going",
        "docs",
        "build/html",
        { replace = "posargs", default = [
        ], extend = true },
    ],
]

[tool.tox.env.docs-autobuild]
description = "Run docs with autobuild on change"
commands = [
    [
        "sphinx-autobuild",
        "--show-traceback",
        "--watch",
        "README.md",
        "docs",
        "build/html",
        { replace = "posargs", default = [
        ], extend = true },
    ],
]

[tool.ruff]
src = ["src", "tests"]
line-length = 88

[tool.ruff.lint]
extend-select = [
    "B",   # flake8-bugbear - https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "C4",  # flake8-comprehensions - https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "D",   # pydocstyle - https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "E",   # pycodestyle errors - https://docs.astral.sh/ruff/rules/#error-e
    "F",   # pyflakes rules - https://docs.astral.sh/ruff/rules/#pyflakes-f
    "N",   # pep8-naming - https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "W",   # pycodestyle warnings - https://docs.astral.sh/ruff/rules/#warning-w
    "I",   # isort - https://docs.astral.sh/ruff/rules/#isort-i
    "UP",  # pyupgrade - https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "SLF", # self - https://docs.astral.sh/ruff/settings/#lintflake8-self
]
ignore = [
    "B008", # We use function calls in service arguments
    "D105", # Don't document magic methods as they don't appear in sphinx autodoc pages
    "D107", # We document the class, not the __init__ method
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]

"tests/**/*" = [
    "D", # Don't check docstrings in tests
]

[tool.uv.sources]
autodoc-pydantic = { git = "https://github.com/coretl/autodoc_pydantic.git", rev = "0b95311d8d10fce67a9ecd5830330364e31fa49c" }
